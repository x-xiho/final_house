# -*- coding: utf-8 -*-
"""CB_share_1113.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QZJlwf7fey7jvY-4bBEBIeNJZk7gLPbJ
"""

from google.colab import drive
drive.mount("/content/drive/")

import pandas as pd
import numpy as np
import ast

pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)

import pandas as pd
import numpy as np
import ast


#item matrix 불러오기
item_matrix = pd.read_csv('/content/drive/MyDrive/2023_아미공_졸업프로젝트/03_데이터/preprocessed_data/item_matrix_1111.csv', encoding='euc-kr')
item_matrix = item_matrix.set_index("자치구")
item_matrix_t = item_matrix.transpose()

item_matrix


#설문조사 결과 파일 불러오기 (sheet0)
survey_result = pd.read_excel('/content/drive/MyDrive/2023_아미공_졸업프로젝트/03_데이터/preprocessed_data/survey_result_hyo.xlsx', sheet_name=0)
survey_result


# 마지막 유저만 추출
last_user = survey_result.iloc[-1:]
users = last_user.to_dict(orient='records')
users


#user_matrix 생성 (비어있는 df임 틀만 생성)
columns = ['범죄', 'cctv', '경찰서', '파출소지구대', '소방서', '마트', '미술관', '공연장', '영화관', '헬스', '풋살', '테니스', '탁구', '축구', '족구', '야구', '스쿼시', '수영', '배드민턴', '배구', '농구', '도서관', '쇼핑', '지하철', '시내버스', '광역버스', '기차', '따릉이', '공원', '미세먼지', '소음', '풍수해', '주택침수', '병원', '미취학교육', '초등학교', '중학교', '고등학교', '특수학교', '인구통계', '집값', '노인시설', '장애인시설', '아동시설']

user_matrix = pd.DataFrame(0, columns=columns, index=[chr(65 + i) for i in range(len(last_user))])

user_matrix


#######################설문조사 결과로 가중치 부여 (user_matrix 채우는 과정)##############################

##keys

# 성별 : sex
# 나이: age
# 가족형태:family
# 혼인여부: marry
# 자녀: child
# 취미: hobby
# 교통수단: car
# 환경: env
# 복지시설: wel
# 성향: ten


# 각 key에 따른 함수
def update_gender(user, matrix):
    if user == '여성':
      #교통, 안전, 교육
        matrix['경찰서'] += 3
        matrix['cctv'] += 3
        matrix['범죄'] += 3
        matrix['도서관'] += 1
        matrix['미취학교육'] += 1
        matrix['초등학교'] += 1
        matrix['중학교'] += 1
        matrix['고등학교'] += 1
        matrix['특수학교'] += 1

    elif user == '남성':
      #교통, 교육, 편익/위락시설
        matrix['마트'] += 2
        matrix['미취학교육'] += 1
        matrix['초등학교'] += 1
        matrix['중학교'] += 1
        matrix['고등학교'] += 1
        matrix['특수학교'] += 1

def update_age(user, matrix):
    if user == '10대 이하':
        pass
    elif user == '20대':
      #교통, 안전, 편익, 교육
        matrix['경찰서'] += 2
        matrix['cctv'] += 2
        matrix['범죄'] += 2
        matrix['범죄'] += 2
        matrix['마트'] += 1
    elif user == '30대':
      #교통, 교육, 자녀양육, 편
        matrix['미취학교육'] += 2
        matrix['초등학교'] += 2
        matrix['중학교'] += 2
        matrix['고등학교'] += 2
        matrix['특수학교'] += 2
        matrix['마트'] += 1
    elif user == '40대':
      #교통, 교육, 자녀양육, 안전
        matrix['미취학교육'] += 2
        matrix['초등학교'] += 2
        matrix['중학교'] += 2
        matrix['고등학교'] += 2
        matrix['특수학교'] += 2
        matrix['경찰서'] += 1
        matrix['cctv'] += 1
        matrix['범죄'] += 1
    elif user == '50대':
      #교통, 교육, 편익, 녹지
        matrix['미취학교육'] += 2
        matrix['초등학교'] += 2
        matrix['중학교'] += 2
        matrix['고등학교'] += 2
        matrix['특수학교'] += 2
        matrix['공원'] += 1
        matrix['마트'] += 1
        matrix['병원'] + 2
    elif user == '60대이상':
      #교통, 편익, 안전, 녹지
        matrix['공원'] += 2
        matrix['마트'] += 2
        matrix['병원'] + 2
        matrix['경찰서'] += 1
        matrix['cctv'] += 1
        matrix['범죄'] += 1

def update_family(user, matrix):
    if user == '1인':
      #교통, 편익, 치안
        matrix['공원'] += 2
        matrix['마트'] += 2
        matrix['병원'] + 2
        matrix['경찰서'] += 1
        matrix['cctv'] += 1
        matrix['범죄'] += 1
    elif user == '2인':
      #교통, 편익, 치안, 교육
        matrix['공원'] += 2
        matrix['마트'] += 2
        matrix['병원'] + 2
        matrix['경찰서'] += 1
        matrix['cctv'] += 1
        matrix['범죄'] += 1
    elif user == '3인':
      #교통, 교육, 자녀, 치안
        matrix['미취학교육'] += 2
        matrix['초등학교'] += 2
        matrix['중학교'] += 2
        matrix['고등학교'] += 2
        matrix['특수학교'] += 2
    elif user == '4인':
      #교통, 교육, 자녀, 제태크
        matrix['미취학교육'] += 2
        matrix['초등학교'] += 2
        matrix['중학교'] += 2
        matrix['고등학교'] += 2
        matrix['특수학교'] += 2
    elif user == '5인':
      #교통, 교육, 자녀, 제태크+치안
        matrix['미취학교육'] += 2
        matrix['초등학교'] += 2
        matrix['중학교'] += 2
        matrix['고등학교'] += 2
        matrix['특수학교'] += 2
        matrix['경찰서'] += 1
        matrix['cctv'] += 1
        matrix['범죄'] += 1

def update_marry(user, matrix):
    if user == '미혼':
        matrix['공원'] += 1
    elif user == '기혼':
        matrix['미취학교육'] += 1
        matrix['초등학교'] += 1
        matrix['중학교'] += 1
        matrix['고등학교'] += 1
        matrix['특수학교'] += 1
    elif user == '기타':
        matrix['초등학교'] += 1



def update_ten(user,matrix):
    if user == '자연':
        matrix['공원'] += 5
    elif user == '핫플':
        matrix['쇼핑'] += 5


# key와 함수 매핑
key_to_func = {
    'sex': update_gender,
    'age': update_age,
    'family': update_family,
    'marry': update_marry,
    # 'child': update_child,
    # 'hobby': update_hobby,
    # 'sports': update_sports,
    # 'car':
    # 'env':
    # 'wel':update_wel,
    'ten': update_ten
}



##### 사용자 정보에 따라 matrix 업데이트
for key, update_func in key_to_func.items():
    for user, info in zip(users, user_matrix.index):
        update_func(user[key], user_matrix.loc[info])


####################복수선택 있는 항목들########################

##hobby

def update_hobby(user, matrix):
    if not pd.isnull(user['hobby']):
        hobby_list = ast.literal_eval(user['hobby'])
        if isinstance(hobby_list, list):
            for hobby in hobby_list:
                if hobby == '쇼핑' and '쇼핑' in matrix:
                    matrix['쇼핑'] += 5
                if hobby == '산책' and '공원' in matrix:
                    matrix['공원'] += 5
                if hobby == '미술' and '미술관' in matrix:
                    matrix['미술관'] += 5
                if hobby == '독서' and '도서관' in matrix:
                    matrix['도서관'] += 5
        else:
            if hobby_list == '쇼핑' and '쇼핑' in matrix:
                matrix['쇼핑'] += 5
            if hobby_list == '산책' and '공원' in matrix:
                matrix['공원'] += 5
            if hobby_list == '미술' and '미술관' in matrix:
                matrix['미술관'] += 5
            if hobby_list == '독서' and '도서관' in matrix:
                matrix['도서관'] += 5


for user in users:
    update_hobby(user, user_matrix)


##sports


def update_sports(user, matrix):
   if not pd.isnull(user['sports']):
        sportslist = ast.literal_eval(user['sports'])
        if isinstance(sportslist, list):
            for sports in sportslist:
                if sports == '축구':
                    if '축구' in matrix:
                        matrix['축구'] += 5

                if sports == '족구':
                    if '족구' in matrix:
                        matrix['족구'] += 5

                if sports == '풋살':
                    if '풋살' in matrix:
                        matrix['풋살'] += 5

                if sports == '테니스':
                    if '테니스' in matrix:
                        matrix['테니스'] += 5

                if sports == '배드민턴':
                    if '배드민턴' in matrix:
                        matrix['배드민턴'] += 5

                if sports == '스쿼시':
                    if '스쿼시' in matrix:
                        matrix['스쿼시'] += 5

                if sports == '배구':
                    if '배구' in matrix:
                        matrix['배구'] += 5

                if sports == '농구':
                    if '농구' in matrix:
                        matrix['농구'] += 5

                if sports == '야구':
                    if '야구' in matrix:
                        matrix['야구'] += 5

                if sports == '탁구':
                    if '탁구' in matrix:
                        matrix['탁구'] += 5

                if sports == '헬스':
                    if '헬스' in matrix:
                        matrix['헬스'] += 5

                if sports == '수영':
                    if '수영' in matrix:
                        matrix['수영'] += 5
        else:
                if sportslist == '축구':
                    if '축구' in matrix:
                        matrix['축구'] += 5

                if sportslist == '족구':
                    if '족구' in matrix:
                        matrix['족구'] += 5

                if sportslist == '풋살':
                    if '풋살' in matrix:
                        matrix['풋살'] += 5

                if sportslist == '테니스':
                    if '테니스' in matrix:
                        matrix['테니스'] += 5

                if sportslist == '배드민턴':
                    if '배드민턴' in matrix:
                        matrix['배드민턴'] += 5

                if sportslist == '스쿼시':
                    if '스쿼시' in matrix:
                        matrix['스쿼시'] += 5

                if sportslist == '배구':
                    if '배구' in matrix:
                        matrix['배구'] += 5

                if sportslist == '농구':
                    if '농구' in matrix:
                        matrix['농구'] += 5

                if sportslist == '야구':
                    if '야구' in matrix:
                        matrix['야구'] += 5

                if sportslist == '탁구':
                    if '탁구' in matrix:
                        matrix['탁구'] += 5

                if sportslist == '헬스':
                    if '헬스' in matrix:
                        matrix['헬스'] += 5

                if sportslist == '수영':
                    if '수영' in matrix:
                        matrix['수영'] += 5


for user in users:
    update_sports(user, user_matrix)



##child

def update_child(user, matrix):
    if not pd.isnull(user['child']):
        child_list = ast.literal_eval(user['child'])
        if isinstance(child_list, list):
            for child in child_list:
                if child == '미취학아동' and '미취학교육' in matrix:
                    matrix['미취학교육'] += 5
                if child == '초등학교' and '초등학교' in matrix:
                    matrix['초등학교'] += 5
                if child == '중학교' and '중학교' in matrix:
                    matrix['중학교'] += 5
                if child == '고등학교' and '고등학교' in matrix:
                    matrix['고등학교'] += 5
                if child == '특수학교' and '특수학교' in matrix:
                    matrix['특수학교'] += 5
        else:
            if child_list == '미취학아동' and '미취학교육' in matrix:
                matrix['미취학교육'] += 5
            if child_list == '초등학교' and '초등학교' in matrix:
                matrix['초등학교'] += 5
            if child_list == '중학교' and '중학교' in matrix:
                matrix['중학교'] += 5
            if child_list == '고등학교' and '고등학교' in matrix:
                matrix['고등학교'] += 5
            if child_list == '특수학교' and '특수학교' in matrix:
                matrix['특수학교'] += 5


for user in users:
    update_child(user, user_matrix)


##wel

def update_wel(user, matrix):
    if not pd.isnull(user['wel']):
        wel_list = ast.literal_eval(user['wel'])
        if isinstance(wel_list, list):
            for wel in wel_list:
                if wel == '노인' and '노인시설' in matrix:
                    matrix['노인시설'] += 5
                if wel == '장애인' and '장애인시설' in matrix:
                    matrix['장애인시설'] += 5
                if wel == '아동' and '아동시설' in matrix:
                    matrix['아동시설'] += 5

        else:
            if wel_list == '노인' and '노인시설' in matrix:
                    matrix['노인시설'] += 5
            if wel_list == '장애인' and '장애인시설' in matrix:
                    matrix['장애인시설'] += 5
            if wel_list == '아동' and '아동시설' in matrix:
                    matrix['아동시설'] += 5

for user in users:
    update_wel(user, user_matrix)



#####################PRIORITY 추가##########################

#######pri
user_pri_1 = pd.read_excel('/content/drive/MyDrive/2023_아미공_졸업프로젝트/03_데이터/preprocessed_data/survey_result_hyo.xlsx', sheet_name=1)
user_pri_1

#마지막 유저만 추출
last_user_pri = user_pri_1.iloc[-1:]


#순위를 점수로 바꿔주는 부분

scores = [7, 6, 5, 4, 3, 2, 1]
for col in last_user_pri.columns[1:]:  # 'name' 열을 제외한 나머지 열에 대해
    last_user_pri[col] = last_user_pri[col].apply(lambda x: scores[x - 1])


last_user_pri

#dic 형태로 바꾸기
last_user_pri = last_user_pri.to_dict(orient='records')
last_user_pri


for user in last_user_pri:
    for key, value in user.items():
        if key != 'name':
            if key == '안전':
                user_matrix['경찰서'] += value
                user_matrix['cctv'] += value
                user_matrix['범죄'] += value
                user_matrix['파출소지구대'] += value
            elif key == '생활시설':
                user_matrix['마트'] += value
            elif key == '교육':
                user_matrix['미취학교육'] += value
                user_matrix['초등학교'] += value
                user_matrix['중학교'] += value
                user_matrix['고등학교'] += value
                user_matrix['특수학교'] += value
                user_matrix['도서관'] += value
            elif key == '의료':
                user_matrix['병원'] += value
            elif key == '환경':
                user_matrix['공원'] += value
                user_matrix['미세먼지'] += value
                user_matrix['소음'] += value
                user_matrix['풍수해'] += value
            elif key == '교통':
                user_matrix['지하철'] += value
                user_matrix['시내버스'] += value
                user_matrix['광역버스'] += value
                user_matrix['기차'] += value
                user_matrix['따릉이'] += value
            elif key == '기타':
                pass

############## car
user_car_2 = pd.read_excel('/content/drive/MyDrive/2023_아미공_졸업프로젝트/03_데이터/preprocessed_data/survey_result_hyo.xlsx', sheet_name=2)
user_car_2

last_user_car = user_car_2.iloc[-1:]
last_user_car

#dic 형태로 바꾸기
last_user_car = last_user_car.to_dict(orient='records')
last_user_car


for user in last_user_car:
    for key, value in user.items():
        if key != 'name':
            if key == '광역버스':
                user_matrix['광역버스'] += value
            elif key == '기차':
                user_matrix['기차'] += value
            elif key == '따릉이':
                user_matrix['따릉이'] += value
            elif key == '시내버스':
                user_matrix['시내버스'] += value
            elif key == '지하철':
                user_matrix['지하철'] += value
            elif key == '자차':
                pass


############## env
user_env_3 = pd.read_excel('/content/drive/MyDrive/2023_아미공_졸업프로젝트/03_데이터/preprocessed_data/survey_result_hyo.xlsx', sheet_name=3)
user_env_3

last_user_env = user_env_3.iloc[-1:]
last_user_env

#dic 형태로 바꾸기
last_user_env = last_user_env.to_dict(orient='records')
last_user_env


for user in last_user_env:
    for key, value in user.items():
        if key != 'name':
            if key == '공원':
                user_matrix['공원'] += value
            elif key == '미세먼지':
                user_matrix['미세먼지'] += value
            elif key == '소음':
                user_matrix['소음'] += value
            elif key == '주택침수':
                user_matrix['주택침수'] += value
            elif key == '풍수해':
                user_matrix['풍수해'] += value


############## 결과 #######################
#0은 nan으로 채우기
user_matrix.replace(0, np.nan, inplace=True)


#user_matrix와 item_matrix의 nan은 일단 0.1로 채움

user_matrix_filled = user_matrix.fillna(0.1)
item_matrix_filled = item_matrix_t.fillna(0.1)


#내적
user_item_matrix = user_matrix_filled.dot(item_matrix_filled)

#가장 마지막 행 사용자의 결과 출력
last_user_score = user_item_matrix
results = last_user_score.max().nlargest(3).index

results

#####결과 업로드 #####

#추천결과를 survey_result(파일의 sheet 0) 업데이트 (마지막행, location 1,2,3으로 구분)
survey_result.loc[survey_result.index[-1], 'location1'] = results[0]
survey_result.loc[survey_result.index[-1], 'location2'] = results[1]
survey_result.loc[survey_result.index[-1], 'location3'] = results[2]

survey_result


########### 저장 ###############

from openpyxl import load_workbook
from openpyxl.utils.dataframe import dataframe_to_rows


directory_path = 'C:/Users/Hyo/Documents/project/final_house/server/'
file_name = 'survey-result.xlsx'  # 저장할 파일 이름을 지정

# 엑셀 파일 로드
workbook = load_workbook(file_name)

# 현재 시트 선택
sheet = workbook['Sheet1']
current_rows = sheet.max_row

# 초기화
sheet.delete_rows(1, sheet.max_row)

# 맨 마지막 행에 데이터 추가
for row in dataframe_to_rows(survey_result, index=False, header=True):
    sheet.append(row)

# 파일 저장
workbook.save(file_name)