# -*- coding: utf-8 -*-
"""CB_share_1112_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uNI_KrCsrvjP_n6nGqVIspvPzr8sFi4G
"""

import pandas as pd
import numpy as np
from openpyxl import load_workbook
from openpyxl.utils.dataframe import dataframe_to_rows

#df 생략 없이 전체 행렬 다 보려고
pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)

#item matrix 불러오기
item_matrix = pd.read_csv('C:/Users/Hyo/Documents/project/final_house/server/item_matrix_1111.csv', encoding='euc-kr')
item_matrix = item_matrix.set_index("자치구")
item_matrix_t = item_matrix.transpose()

item_matrix


#설문조사 결과 파일 불러오기 (sheet0)
survey_result = pd.read_excel('C:/Users/Hyo/Documents/project/final_house/server/survey-result.xlsx', sheet_name=0)
survey_result

#마지막 유저만 추출
last_user = survey_result.iloc[-1:]
last_user


# DataFrame을 dictionary를 요소로 가지는 리스트로 변환
#변수명만 users지 last_user 정보만 가져온 것임
users = last_user.to_dict(orient='records')


#user_matrix 생성 (비어있는 df임 틀만 생성)
columns = ['범죄', 'cctv', '경찰서', '파출소지구대', '소방서', '마트', '미술관', '공연장', '영화관', '헬스', '풋살', '테니스', '탁구', '축구', '족구', '야구', '스쿼시', '수영', '배드민턴', '배구', '농구', '도서관', '쇼핑', '지하철', '시내버스', '광역버스', '기차', '따릉이', '공원', '미세먼지', '소음', '풍수해', '주택침수', '병원', '미취학교육', '초등학교', '중학교', '고등학교', '특수학교', '인구통계', '집값', '노인시설', '장애인시설', '아동시설']

user_matrix = pd.DataFrame(0, columns=columns, index=[chr(65 + i) for i in range(len(last_user))])

#######################설문조사 결과로 가중치 부여 (user_matrix 채우는 과정)##############################

##keys

# 성별 : sex
# 나이: age
# 가족형태:family
# 혼인여부: marry
# 자녀: child
# 취미: hobby
# 교통수단: car
# 환경: env
# 복지시설: wel
# 성향: ten


# 각 key에 따른 함수
def update_gender(user, matrix):
    if user == '여성':
      #교통, 안전, 교육
        matrix['경찰서'] += 3
        matrix['cctv'] += 3
        matrix['범죄'] += 3
        matrix['지하철'] += 2
        matrix['시내버스'] += 2
        matrix['광역버스'] += 2
        matrix['기차'] += 2
        matrix['따릉이'] += 2
    elif user == '남성':
      #교통, 교육, 편익/위락시설
        matrix['지하철'] += 3
        matrix['시내버스'] += 3
        matrix['광역버스'] += 3
        matrix['기차'] += 3
        matrix['따릉이'] += 3
        matrix['마트'] += 2

def update_age(user, matrix):
    if user == '10대 이하':
        matrix['공원'] += 1
    elif user == '20대':
      #교통, 안전, 편익, 교육
        matrix['지하철'] += 3
        matrix['시내버스'] += 3
        matrix['광역버스'] += 3
        matrix['기차'] += 3
        matrix['따릉이'] += 3
        matrix['경찰서'] += 2
        matrix['cctv'] += 2
        matrix['범죄'] += 2
        matrix['마트'] += 1
    elif user == '30대':
      #교통, 교육, 자녀양육, 편
        matrix['지하철'] += 3
        matrix['시내버스'] += 3
        matrix['광역버스'] += 3
        matrix['기차'] += 3
        matrix['따릉이'] += 3
        matrix['미취학교육'] += 2
        matrix['초등학교'] += 2
        matrix['중학교'] += 2
        matrix['고등학교'] += 2
        matrix['특수학교'] += 2
    elif user == '40대':
      #교통, 교육, 자녀양육, 안전
        matrix['지하철'] += 3
        matrix['시내버스'] += 3
        matrix['광역버스'] += 3
        matrix['기차'] += 3
        matrix['따릉이'] += 3
        matrix['미취학교육'] += 2
        matrix['초등학교'] += 2
        matrix['중학교'] += 2
        matrix['고등학교'] += 2
        matrix['특수학교'] += 2
    elif user == '50대':
      #교통, 교육, 편익, 녹지
        matrix['지하철'] += 3
        matrix['시내버스'] += 3
        matrix['광역버스'] += 3
        matrix['기차'] += 3
        matrix['따릉이'] += 3
        matrix['미취학교육'] += 2
        matrix['초등학교'] += 2
        matrix['중학교'] += 2
        matrix['고등학교'] += 2
        matrix['특수학교'] += 2
        matrix['공원'] += 1
        matrix['마트'] += 1
        matrix['병원'] + 2
    elif user == '60대이상':
      #교통, 편익, 안전, 녹지
        matrix['지하철'] += 3
        matrix['시내버스'] += 3
        matrix['광역버스'] += 3
        matrix['기차'] += 3
        matrix['따릉이'] += 3
        matrix['공원'] += 2
        matrix['마트'] += 2
        matrix['병원'] + 2
        matrix['경찰서'] += 1
        matrix['cctv'] += 1
        matrix['범죄'] += 1

def update_family(user, matrix):
    if user == '1인':
      #교통, 편익, 치안
        matrix['지하철'] += 3
        matrix['시내버스'] += 3
        matrix['광역버스'] += 3
        matrix['기차'] += 3
        matrix['따릉이'] += 3
        matrix['공원'] += 2
        matrix['마트'] += 2
        matrix['병원'] + 2
        matrix['경찰서'] += 1
        matrix['cctv'] += 1
        matrix['범죄'] += 1
    elif user == '2인':
      #교통, 편익, 치안, 교육
        matrix['지하철'] += 3
        matrix['시내버스'] += 3
        matrix['광역버스'] += 3
        matrix['기차'] += 3
        matrix['따릉이'] += 3
        matrix['공원'] += 2
        matrix['마트'] += 2
        matrix['병원'] + 2
        matrix['경찰서'] += 1
        matrix['cctv'] += 1
        matrix['범죄'] += 1
    elif user == '3인':
      #교통, 교육, 자녀, 치안
        matrix['지하철'] += 3
        matrix['시내버스'] += 3
        matrix['광역버스'] += 3
        matrix['기차'] += 3
        matrix['따릉이'] += 3
        matrix['미취학교육'] += 2
        matrix['초등학교'] += 2
        matrix['중학교'] += 2
        matrix['고등학교'] += 2
        matrix['특수학교'] += 2
    elif user == '4인':
      #교통, 교육, 자녀, 제태크
        matrix['지하철'] += 3
        matrix['시내버스'] += 3
        matrix['광역버스'] += 3
        matrix['기차'] += 3
        matrix['따릉이'] += 3
        matrix['미취학교육'] += 2
        matrix['초등학교'] += 2
        matrix['중학교'] += 2
        matrix['고등학교'] += 2
        matrix['특수학교'] += 2
    elif user == '5인':
      #교통, 교육, 자녀, 제태크+치안
        matrix['지하철'] += 3
        matrix['시내버스'] += 3
        matrix['광역버스'] += 3
        matrix['기차'] += 3
        matrix['따릉이'] += 3
        matrix['미취학교육'] += 2
        matrix['초등학교'] += 2
        matrix['중학교'] += 2
        matrix['고등학교'] += 2
        matrix['특수학교'] += 2
        matrix['경찰서'] += 1
        matrix['cctv'] += 1
        matrix['범죄'] += 1

def update_marry(user, matrix):
    if user == '미혼':
        matrix['공원'] += 1
    elif user == '기혼':
        matrix['미취학교육'] += 1
        matrix['초등학교'] += 1
        matrix['중학교'] += 1
        matrix['고등학교'] += 1
        matrix['특수학교'] += 1
    elif user == '기타':
        matrix['초등학교'] += 1

def update_child(user, matrix):
    #없음은 그냥 다 패스함
    if user == '미취학아동':
        matrix['미취학교육'] += 5
    elif user == '초등학교':
        matrix['초등학교'] += 5
    elif user == '중학교':
        matrix['중학교'] += 5
    elif user == '고등학교':
        matrix['고등학교'] += 5
    elif user == '특수학교':
        matrix['특수학교'] += 5

def update_hobby(user, matrix):
    # if user == '운동':
    #     matrix['공원'] += 1
    if user == '공연관람':
        matrix['공연장'] += 5
    # 영화관람은?
    elif user == '미술':
        matrix['미술관'] += 5
    elif user == '산책':
        matrix['공원'] += 5
    elif user == '쇼핑':
        matrix['쇼핑'] += 5
    elif user == '독서':
        matrix['도서관'] += 5
    # 기타는 그냥 없는 거임

def update_sports(user,matrix):
    if user == '축구':
        matrix['축구'] += 5
    elif user == '족구':
        matrix['족구'] += 5
    elif user == '풋살':
        matrix['풋살'] += 5
    elif user == '테니스':
        matrix['테니스'] += 5
    elif user == '배드민턴':
        matrix['배드민턴'] += 5
    elif user == '스쿼시':
        matrix['스쿼시'] += 5
    elif user == '배구':
        matrix['배구'] += 5
    elif user == '농구':
        matrix['농구'] += 5
    elif user == '야구':
        matrix['야구'] += 5
    elif user == '탁구':
        matrix['탁구'] += 5
    elif user == '헬스':
        matrix['헬스'] += 5
    elif user == '수영':
        matrix['수영'] += 5
    #기타는 점수 안 더함 << 안 더하면 안 되는 걸...

def update_wel(user,matrix):
    if user == '노인':
        matrix['노인시설'] += 5
    elif user == '장애인':
        matrix['장애인시설'] += 5
    elif user == '아동':
        matrix['아동시설'] += 5
    # 없음은 점수 안 더함

def update_ten(user,matrix):
    if user == '자연':
        matrix['공원'] += 5
    elif user == '핫플':
        matrix['쇼핑'] += 5


# key와 함수 매핑
key_to_func = {
    'sex': update_gender,
    'age': update_age,
    'family': update_family,
    'marry': update_marry,
    'child': update_child,
    'hobby': update_hobby,
    'sports': update_sports,
    # 'car':
    # 'env':
    'wel':update_wel,
    'ten': update_ten
}


##### 사용자 정보에 따라 matrix 업데이트
for key, update_func in key_to_func.items():
    for user, info in zip(users, user_matrix.index):
        update_func(user[key], user_matrix.loc[info])

#0은 nan으로 채우기
user_matrix.replace(0, np.nan, inplace=True)


#user_matrix와 item_matrix의 nan은 일단 0.1로 채움

user_matrix_filled = user_matrix.fillna(0.1)
item_matrix_filled = item_matrix_t.fillna(0.1)


#내적
user_item_matrix = user_matrix_filled.dot(item_matrix_filled)

#가장 마지막 행 사용자의 결과 출력
last_user_score = user_item_matrix
results = last_user_score.max().nlargest(3).index

print(results)

#####결과 업로드 및 저장######

#추천결과를 survey_result(파일의 sheet 0) 업데이트 (마지막행, location 1,2,3으로 구분)
survey_result.loc[survey_result.index[-1], 'location1'] = results[0]
survey_result.loc[survey_result.index[-1], 'location2'] = results[1]
survey_result.loc[survey_result.index[-1], 'location3'] = results[2]

survey_result

# # ##########저장############

file_path = 'C:/Users/Hyo/Documents/project/final_house/server/survey-result.xlsx'
workbook = load_workbook(file_path)


# 현재 시트 선택
sheet = workbook['Sheet1']
current_rows = sheet.max_row

# 초기화
sheet.delete_rows(1, sheet.max_row)

# 맨 마지막 행에 데이터 추가
for row in dataframe_to_rows(survey_result, index=False, header=True):
    sheet.append(row)

# 파일 저장
workbook.save(file_path)